{"version":3,"sources":["0_variables.js","1_data.js","2_render.js","3_listeners.js","4_fav_render.js","5_filter.js","6_fav_listeners.js","7_reset.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjxjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"main.js","sourcesContent":["'use strict';\n\n//CONSTANTES GLOBALES\n\n//Traigo los elementos de html y los guardo en variables\nconst searchInput = document.querySelector('.js-input');\nconst searchBtn = document.querySelector('.js-btn');\nconst cardsList = document.querySelector('.js-list');\nconst favCardsList = document.querySelector('.js-fav-list');\nconst resetButton = document.querySelector('.js-reset-btn');\nconst favsSection = document.querySelector('.js-fav-cards');\n\n// Declaro un array vacío donde luego irán los datos de la API\nlet countriesList = [];\n\n//Array de favoritos (también vacío) a partir de las tarjetas seleccionadas\nlet favouriteCountries = [];\n","'use strict';\n\n//RECOJO DATOS DE LA API. Vuelvo a la primera versión de la función con fetch, porque del localStorage sólo quiero las favoritas, y había guardado todas\nfunction getData() {\n  fetch('https://restcountries.com/v3.1/all/')\n    .then((response) => response.json())\n    .then((data) => {\n      const cleanData = data\n        .map((country) => {\n          return {\n            name: country.name.common,\n            id: Math.floor(Math.random() * 500),\n            img: country.flags.png,\n            alt: country.flags.alt,\n            continent: country.continents[0],\n            capital: country.capital,\n            currencies: country.currencies,\n          };\n        })\n        .sort((a, b) =>\n          a.name.toLowerCase().localeCompare(b.name.toLowerCase())\n        );\n      console.log(cleanData);\n\n      countriesList = cleanData;\n      renderCountriesList();\n    });\n}\n\nfunction getLocalFav() {\n  const favouritesInLocalSt = JSON.parse(localStorage.getItem('favourites'));\n\n  if (favouritesInLocalSt !== null) {\n    favouriteCountries = favouritesInLocalSt;\n    renderFavCountries();\n  }\n}\n\n//Al abrir la página, quiero los datos de la API\ngetData();\n//y mis favoritas guardadas en localStorage\ngetLocalFav();\n","'use strict';\n\n//Función para pintar la tarjeta en sí, con sus elementos de html\nfunction renderCards(country) {\n  //Cambio la función para renderizar las tarjetas con DOM avanzado\n\n  const liElement = document.createElement('li');\n  liElement.classList.add('cards-list-item');\n\n  const articleElement = document.createElement('article');\n\n  const cardFavouriteIndex = favouriteCountries.findIndex(\n    (eachCardObj) => eachCardObj.id === country.id\n  );\n\n  if (cardFavouriteIndex !== -1) {\n    articleElement.classList.add('card', 'js-fav-card', 'selected');\n  } else {\n    articleElement.classList.add('card', 'js-card');\n  }\n\n  articleElement.setAttribute('id', country.id);\n\n  const imgElem = document.createElement('img');\n  imgElem.setAttribute('src', country.img);\n  imgElem.setAttribute('alt', country.alt);\n  imgElem.setAttribute('title', country.name);\n  imgElem.classList.add('card-img');\n\n  const nameElement = document.createElement('h3');\n  nameElement.classList.add('card-name');\n  const textNameElement = document.createTextNode(country.name);\n\n  const continentElement = document.createElement('p');\n  continentElement.classList.add('card-continent');\n  const textContinentElement = document.createTextNode(country.continent);\n\n  nameElement.appendChild(textNameElement);\n  continentElement.appendChild(textContinentElement);\n\n  articleElement.appendChild(imgElem);\n  articleElement.appendChild(nameElement);\n  articleElement.appendChild(continentElement);\n\n  liElement.appendChild(articleElement);\n\n  const card = liElement;\n\n  return card;\n}\n\n//Función para pintar la lista completa de tarjetas de personajes\nfunction renderCountriesList() {\n  cardsList.innerHTML = '';\n  for (const card of countriesList) {\n    cardsList.appendChild(renderCards(card));\n  }\n\n  cardListeners();\n}\n","'use strict';\n\n// Función para buscar los obj seleccionados y generar un nuevo array con ellos\nfunction handleClickCard(event) {\n  //Recupero la línea de código que me pintaba la tarjeta en el listado general (ahora la quiero pintada en ambos listados)\n  event.currentTarget.classList.add('selected');\n\n  const current = parseInt(event.currentTarget.id);\n\n  const selectedCard = countriesList.find(\n    (eachCardObj) => eachCardObj.id === current\n  );\n\n  //Busco el problema y era que una era string y otra number, uso typeof, por eso creo una variable donde recoger el nuevo valor (en nº) para comparar\n\n  const cardFavouriteIndex = favouriteCountries.findIndex(\n    (eachCardObj) => eachCardObj.id === current\n  );\n\n  //Si no está en favoritos, haz el push\n  if (cardFavouriteIndex === -1) {\n    favouriteCountries.push(selectedCard);\n  } else {\n    //añado la opción de que si el usuario vuelve a hacer click en el listado a una tarjeta favorita, también la quite de favoritos (no sólo clickando en la x de favoritas)\n    favouriteCountries.splice(cardFavouriteIndex, 1);\n    event.currentTarget.classList.remove('selected');\n  }\n  //guardo el listado de favoritas en localStorage, con las actualizaciones del if/else\n  localStorage.setItem('favourites', JSON.stringify(favouriteCountries));\n\n  renderFavCountries();\n}\n\n//Función que crea un bucle para recorrer los elementos del array generado con QSA y así nos permite aplicarle el EVENTLISTENER a cada tarjeta del listado general\nfunction cardListeners() {\n  const allCountryCards = document.querySelectorAll('.js-card');\n  for (const eachCard of allCountryCards) {\n    eachCard.addEventListener('click', handleClickCard);\n  }\n}\n","'use strict';\n\n//Función para pintar la tarjeta en sí, esta vez para los personajes favoritos\nfunction renderFavCard(favCountry) {\n  //Cambio la función para renderizar las tarjetas de favoritos con DOM avanzado\n\n  const liElement = document.createElement('li');\n  liElement.classList.add('cards-list-item');\n\n  const articleElement = document.createElement('article');\n  articleElement.classList.add('favcard', 'js-fav-card', 'selected');\n  articleElement.setAttribute('id', favCountry.id);\n\n  const crossElement = document.createElement('i');\n  crossElement.classList.add('fa-solid', 'fa-square-xmark');\n\n  const imgElem = document.createElement('img');\n  imgElem.setAttribute('src', favCountry.img);\n  imgElem.setAttribute('alt', favCountry.alt);\n  imgElem.setAttribute('title', favCountry.name);\n  imgElem.classList.add('card-img');\n\n  const nameElement = document.createElement('h3');\n  nameElement.classList.add('card-name');\n  const textNameElement = document.createTextNode(favCountry.name);\n\n  const continentElement = document.createElement('p');\n  continentElement.classList.add('card-continent', 'favcard-text');\n  const textContinentElement = document.createTextNode(\n    `Continent: ${favCountry.continent}`\n  );\n\n  const capitalElement = document.createElement('p');\n  capitalElement.classList.add('card-capital', 'favcard-text');\n  const textCapitalElement = document.createTextNode(\n    `Capital: ${favCountry.capital[0]}`\n  );\n\n  nameElement.appendChild(textNameElement);\n  continentElement.appendChild(textContinentElement);\n  capitalElement.appendChild(textCapitalElement);\n\n  articleElement.appendChild(crossElement);\n  articleElement.appendChild(imgElem);\n  articleElement.appendChild(nameElement);\n  articleElement.appendChild(continentElement);\n  articleElement.appendChild(capitalElement);\n\n  liElement.appendChild(articleElement);\n\n  const favCard = liElement;\n  return favCard;\n}\n\nfunction paintFavSection() {\n  if (favouriteCountries.length !== 0) {\n    favsSection.classList.remove('hidden');\n  } else {\n    favsSection.classList.add('hidden');\n  }\n  //Llamo a la función para pintar el reset\n  paintReset();\n}\n\n//Función para pintar el listado de tarjetas de mis favoritos, ahora con DOM\nfunction renderFavCountries() {\n  favCardsList.innerHTML = '';\n\n  for (const favCard of favouriteCountries) {\n    favCardsList.appendChild(renderFavCard(favCard));\n  }\n  //Si tenemos favoritos en el listado, llamo a la función para pintar la sección de fav\n  paintFavSection();\n  favCardListeners();\n}\n","'use strict';\n\n//Función para FILTRAR según lo que se escriba en el input (una vez dado al botón)\nfunction filterCards() {\n  let searchedCountry = searchInput.value.toLowerCase();\n  cardsList.innerHTML = '';\n\n  const filteredCountries = countriesList.filter((country) =>\n    country.name.toLowerCase().includes(searchedCountry)\n  );\n\n  for (const country of filteredCountries) {\n    cardsList.appendChild(renderCards(country));\n  }\n\n  if (searchedCountry === '') {\n    renderCountriesList();\n  }\n}\n\n//Función manejadora del botón de buscar, que nos lleva a la función de filtrado\nfunction handleSearch(event) {\n  event.preventDefault();\n\n  filterCards();\n  //Añado de nuevo la función cardListeners porque si no no me dejaba marcar como favoritas los resultados de búsqueda\n  cardListeners();\n}\n\n//Función manejadora del input, para que al borrar nos enseñe de nuevo todo el listado\nfunction handleResetInput(event) {\n  event.preventDefault();\n  let inputData = searchInput.value.toLowerCase();\n  if (inputData === '') {\n    renderCountriesList();\n  }\n}\n\n//Evento para escuchar al botón de buscar\nsearchBtn.addEventListener('click', handleSearch);\n\n//Nuevo evento para escuchar al input y que me vuelva a enseñar todas las tarjetas\nsearchInput.addEventListener('input', handleResetInput);\n","'use strict';\n\n//Función para eliminar la tarjeta de favoritos, al clickarla\nfunction handleClickFavCard(event) {\n  const current = parseInt(event.currentTarget.id);\n  let cardFromWholeList = '';\n\n  const cardFavouriteIndex = favouriteCountries.findIndex(\n    (eachCardObj) => eachCardObj.id === current\n  );\n\n  favouriteCountries.splice(cardFavouriteIndex, 1);\n  const findInWholeList = countriesList.find(\n    (eachCardObj) => eachCardObj.id === current\n  );\n\n  cardFromWholeList = renderCards(findInWholeList);\n  cardFromWholeList.classList.remove('selected');\n\n  renderFavCountries();\n  renderCountriesList();\n\n  localStorage.setItem('favourites', JSON.stringify(favouriteCountries));\n}\n\n//Bucle que recorre el array, esta vez para añadir listeners a las tarjetas favoritas\nfunction favCardListeners() {\n  const favCountriesCards = document.querySelectorAll('.js-fav-card');\n\n  for (const eachCard of favCountriesCards) {\n    eachCard.addEventListener('click', handleClickFavCard);\n  }\n}\n","'use strict';\n\n//Función para qeu el botón de reset aparezca sólo cuando hay favoritos\nfunction paintReset() {\n  if (favouriteCountries.length !== 0) {\n    resetButton.classList.remove('hidden');\n  } else {\n    resetButton.classList.add('hidden');\n  }\n\n  function handleResetButton() {\n    favCardsList.innerHTML = '';\n    favouriteCountries = [];\n    localStorage.removeItem('favourites');\n    resetButton.classList.add('hidden');\n    favsSection.classList.add('hidden');\n    const allCountriesCards = document.querySelectorAll('.js-card');\n    for (const eachCard of allCountriesCards) {\n      eachCard.classList.remove('selected');\n    }\n  }\n\n  resetButton.addEventListener('click', handleResetButton);\n}\n"]}